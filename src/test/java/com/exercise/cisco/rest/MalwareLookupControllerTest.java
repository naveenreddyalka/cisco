package com.exercise.cisco.rest;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.exercise.cisco.CiscoApplication;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = CiscoApplication.class)
@AutoConfigureMockMvc
public class MalwareLookupControllerTest {

	@Autowired
	private MockMvc mvc;

	@Test
	public void getURLInfo() throws Exception {
		mvc.perform(get("/v1/urlinfo?url=dsa")).andExpect(status().isOk());
	}

	@Test
	public void getURLInfoSafe() throws Exception {
		MvcResult result = mvc.perform(get("/v1/urlinfo?url=www.google.com")).andExpect(status().isOk()).andReturn();
		Assert.assertTrue(result.getResponse().getContentAsString().contains("\"urlStatus\":\"URL_SAFE\""));

	}

	@Test
	public void getURLInfoUnSafe() throws Exception {
		MvcResult result = mvc.perform(get("/v1/urlinfo?url=www.cnn.com")).andExpect(status().isOk()).andReturn();
		Assert.assertTrue(result.getResponse().getContentAsString().contains("\"urlStatus\":\"URL_UNSAFE\""));
	}

}
