package com.exercise.cisco.rest;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.json.JacksonJsonParser;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors;
import org.springframework.security.web.FilterChainProxy;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.context.WebApplicationContext;

import com.exercise.cisco.CiscoApplication;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = CiscoApplication.class)
@AutoConfigureMockMvc
public class MalwareLookupControllerTest {

	@Autowired
	private MockMvc mvc;
	
	@Autowired
    private WebApplicationContext wac;
 
    @Autowired
    private FilterChainProxy springSecurityFilterChain;

    
    @Before
    public void setup() {
        this.mvc = MockMvcBuilders.webAppContextSetup(this.wac)
        		.apply(springSecurity())  
          .addFilter(springSecurityFilterChain).build();
    }
    
   
   
    @WithMockUser(username = "b3a302f2a82b3022c964", password = "b3a302f2a82b3022c964", roles = "USER")
    private String obtainAccessToken() throws Exception {
    	  
        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
        params.add("grant_type", "password");
        params.add("client_id", "b3a302f2a82b3022c964");
        params.add("client_secret", "a0e43715c3acea7b17c226d70208d799ee6027aa");
        params.add("username", "");
        params.add("password", "");
        //params.add("code", "code");
     
        ResultActions result 
          = mvc.perform(post("https://github.com/login/oauth/access_token")
        		  //mvc.perform(post("/oauth/token")
        	.params(params).with(SecurityMockMvcRequestPostProcessors.httpBasic("",""))
            //.with(httpBasic("b3a302f2a82b3022c964","b3a302f2a82b3022c964"))
            .accept("application/json;charset=UTF-8"))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"));
     
        String resultString = result.andReturn().getResponse().getContentAsString();
     
        JacksonJsonParser jsonParser = new JacksonJsonParser();
        return jsonParser.parseMap(resultString).get("access_token").toString();
    }
    
	//@Test
	public void getURLInfo() throws Exception {
		String accessToken = obtainAccessToken();
		mvc.perform(get("/v1/urlinfo?url=dsa").header("Authorization", "Bearer " + accessToken)).andExpect(status().isOk());
	}

	//@Test
	public void getURLInfoSafe() throws Exception {
		MvcResult result = mvc.perform(get("/v1/urlinfo?url=www.google.com")).andExpect(status().isOk()).andReturn();
		Assert.assertTrue(result.getResponse().getContentAsString().contains("\"urlStatus\":\"URL_SAFE\""));

	}

	//@Test
	public void getURLInfoUnSafe() throws Exception {
		MvcResult result = mvc.perform(get("/v1/urlinfo?url=www.cnn.com")).andExpect(status().isOk()).andReturn();
		Assert.assertTrue(result.getResponse().getContentAsString().contains("\"urlStatus\":\"URL_UNSAFE\""));
	}

}
